class Node {
    int data;
    Node left;
    Node right;
  
    public Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class BinaryTree {
    Node root;

    public BinaryTree() {
        root = null;
    }
  
    public void insert(int data) {
        root = insertRec(root, data);
    }

    private Node insertRec(Node root, int data) {
        if (root == null) {
            root = new Node(data);
            return root;
        }
      
        if (data < root.data)
            root.left = insertRec(root.left, data);
        else if (data > root.data)
            root.right = insertRec(root.right, data);
      
        return root;
    }

    public boolean search(int data) {
        return searchRec(root, data);
    }
  
    private boolean searchRec(Node root, int data) {
        if (root == null)
            return false;
      
        if (root.data == data)
            return true;
      
        if (data < root.data)
            return searchRec(root.left, data);
      
        return searchRec(root.right, data);
    }

    public void inorderTraversal() {
        inorderTraversalRec(root);
        System.out.println();
    }
  
    private void inorderTraversalRec(Node root) {
        if (root != null) {
            inorderTraversalRec(root.left);
            System.out.print(root.data + " ");
            inorderTraversalRec(root.right);
        }
    }

    public void preorderTraversal() {
        preorderTraversalRec(root);
        System.out.println();
    }
  
    private void preorderTraversalRec(Node root) {
        if (root != null) {
            System.out.print(root.data + " ");
            preorderTraversalRec(root.left);
            preorderTraversalRec(root.right);
        }
    }

    public void postorderTraversal() {
        postorderTraversalRec(root);
        System.out.println();
    }
  
    private void postorderTraversalRec(Node root) {
        if (root != null) {
            postorderTraversalRec(root.left);
            postorderTraversalRec(root.right);
            System.out.print(root.data + " ");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        tree.insert(5);
        tree.insert(3);
        tree.insert(7);
        tree.insert(1);
        tree.insert(4);

        System.out.println("Inorder traversal:");
        tree.inorderTraversal();

        System.out.println("Preorder traversal:");
        tree.preorderTraversal();

        System.out.println("Postorder traversal:");
        tree.postorderTraversal();
    }
}
